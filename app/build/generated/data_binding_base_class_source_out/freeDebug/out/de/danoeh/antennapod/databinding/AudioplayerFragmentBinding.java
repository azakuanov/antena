// Generated by view binder compiler. Do not edit!
package de.danoeh.antennapod.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewpager2.widget.ViewPager2;
import com.google.android.material.tabs.TabLayout;
import de.danoeh.antennapod.R;
import de.danoeh.antennapod.ui.common.PlaybackSpeedIndicatorView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AudioplayerFragmentBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageButton butFF;

  @NonNull
  public final ImageButton butPlay;

  @NonNull
  public final PlaybackSpeedIndicatorView butPlaybackSpeed;

  @NonNull
  public final ImageButton butRev;

  @NonNull
  public final ImageButton butSkip;

  @NonNull
  public final CardView cardViewSeek;

  @NonNull
  public final ViewPager2 pager;

  @NonNull
  public final RelativeLayout playerControl;

  @NonNull
  public final FrameLayout playerFragment;

  @NonNull
  public final LinearLayout playtimeLayout;

  @NonNull
  public final ProgressBar progLoading;

  @NonNull
  public final SeekBar sbPosition;

  @NonNull
  public final TabLayout slidingTabs;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView txtvFF;

  @NonNull
  public final TextView txtvLength;

  @NonNull
  public final TextView txtvPlaybackSpeed;

  @NonNull
  public final TextView txtvPosition;

  @NonNull
  public final TextView txtvRev;

  @NonNull
  public final TextView txtvSeek;

  private AudioplayerFragmentBinding(@NonNull RelativeLayout rootView, @NonNull ImageButton butFF,
      @NonNull ImageButton butPlay, @NonNull PlaybackSpeedIndicatorView butPlaybackSpeed,
      @NonNull ImageButton butRev, @NonNull ImageButton butSkip, @NonNull CardView cardViewSeek,
      @NonNull ViewPager2 pager, @NonNull RelativeLayout playerControl,
      @NonNull FrameLayout playerFragment, @NonNull LinearLayout playtimeLayout,
      @NonNull ProgressBar progLoading, @NonNull SeekBar sbPosition, @NonNull TabLayout slidingTabs,
      @NonNull Toolbar toolbar, @NonNull TextView txtvFF, @NonNull TextView txtvLength,
      @NonNull TextView txtvPlaybackSpeed, @NonNull TextView txtvPosition,
      @NonNull TextView txtvRev, @NonNull TextView txtvSeek) {
    this.rootView = rootView;
    this.butFF = butFF;
    this.butPlay = butPlay;
    this.butPlaybackSpeed = butPlaybackSpeed;
    this.butRev = butRev;
    this.butSkip = butSkip;
    this.cardViewSeek = cardViewSeek;
    this.pager = pager;
    this.playerControl = playerControl;
    this.playerFragment = playerFragment;
    this.playtimeLayout = playtimeLayout;
    this.progLoading = progLoading;
    this.sbPosition = sbPosition;
    this.slidingTabs = slidingTabs;
    this.toolbar = toolbar;
    this.txtvFF = txtvFF;
    this.txtvLength = txtvLength;
    this.txtvPlaybackSpeed = txtvPlaybackSpeed;
    this.txtvPosition = txtvPosition;
    this.txtvRev = txtvRev;
    this.txtvSeek = txtvSeek;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AudioplayerFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AudioplayerFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.audioplayer_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AudioplayerFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      ImageButton butFF = rootView.findViewById(R.id.butFF);
      if (butFF == null) {
        missingId = "butFF";
        break missingId;
      }
      ImageButton butPlay = rootView.findViewById(R.id.butPlay);
      if (butPlay == null) {
        missingId = "butPlay";
        break missingId;
      }
      PlaybackSpeedIndicatorView butPlaybackSpeed = rootView.findViewById(R.id.butPlaybackSpeed);
      if (butPlaybackSpeed == null) {
        missingId = "butPlaybackSpeed";
        break missingId;
      }
      ImageButton butRev = rootView.findViewById(R.id.butRev);
      if (butRev == null) {
        missingId = "butRev";
        break missingId;
      }
      ImageButton butSkip = rootView.findViewById(R.id.butSkip);
      if (butSkip == null) {
        missingId = "butSkip";
        break missingId;
      }
      CardView cardViewSeek = rootView.findViewById(R.id.cardViewSeek);
      if (cardViewSeek == null) {
        missingId = "cardViewSeek";
        break missingId;
      }
      ViewPager2 pager = rootView.findViewById(R.id.pager);
      if (pager == null) {
        missingId = "pager";
        break missingId;
      }
      RelativeLayout playerControl = rootView.findViewById(R.id.player_control);
      if (playerControl == null) {
        missingId = "playerControl";
        break missingId;
      }
      FrameLayout playerFragment = rootView.findViewById(R.id.playerFragment);
      if (playerFragment == null) {
        missingId = "playerFragment";
        break missingId;
      }
      LinearLayout playtimeLayout = rootView.findViewById(R.id.playtime_layout);
      if (playtimeLayout == null) {
        missingId = "playtimeLayout";
        break missingId;
      }
      ProgressBar progLoading = rootView.findViewById(R.id.progLoading);
      if (progLoading == null) {
        missingId = "progLoading";
        break missingId;
      }
      SeekBar sbPosition = rootView.findViewById(R.id.sbPosition);
      if (sbPosition == null) {
        missingId = "sbPosition";
        break missingId;
      }
      TabLayout slidingTabs = rootView.findViewById(R.id.sliding_tabs);
      if (slidingTabs == null) {
        missingId = "slidingTabs";
        break missingId;
      }
      Toolbar toolbar = rootView.findViewById(R.id.toolbar);
      if (toolbar == null) {
        missingId = "toolbar";
        break missingId;
      }
      TextView txtvFF = rootView.findViewById(R.id.txtvFF);
      if (txtvFF == null) {
        missingId = "txtvFF";
        break missingId;
      }
      TextView txtvLength = rootView.findViewById(R.id.txtvLength);
      if (txtvLength == null) {
        missingId = "txtvLength";
        break missingId;
      }
      TextView txtvPlaybackSpeed = rootView.findViewById(R.id.txtvPlaybackSpeed);
      if (txtvPlaybackSpeed == null) {
        missingId = "txtvPlaybackSpeed";
        break missingId;
      }
      TextView txtvPosition = rootView.findViewById(R.id.txtvPosition);
      if (txtvPosition == null) {
        missingId = "txtvPosition";
        break missingId;
      }
      TextView txtvRev = rootView.findViewById(R.id.txtvRev);
      if (txtvRev == null) {
        missingId = "txtvRev";
        break missingId;
      }
      TextView txtvSeek = rootView.findViewById(R.id.txtvSeek);
      if (txtvSeek == null) {
        missingId = "txtvSeek";
        break missingId;
      }
      return new AudioplayerFragmentBinding((RelativeLayout) rootView, butFF, butPlay,
          butPlaybackSpeed, butRev, butSkip, cardViewSeek, pager, playerControl, playerFragment,
          playtimeLayout, progLoading, sbPosition, slidingTabs, toolbar, txtvFF, txtvLength,
          txtvPlaybackSpeed, txtvPosition, txtvRev, txtvSeek);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
