// Generated by view binder compiler. Do not edit!
package de.danoeh.antennapod.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import de.danoeh.antennapod.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemdescriptionListitemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button butPreview;

  @NonNull
  public final TextView txtvDescription;

  @NonNull
  public final TextView txtvPubDate;

  @NonNull
  public final TextView txtvTitle;

  private ItemdescriptionListitemBinding(@NonNull RelativeLayout rootView,
      @NonNull Button butPreview, @NonNull TextView txtvDescription, @NonNull TextView txtvPubDate,
      @NonNull TextView txtvTitle) {
    this.rootView = rootView;
    this.butPreview = butPreview;
    this.txtvDescription = txtvDescription;
    this.txtvPubDate = txtvPubDate;
    this.txtvTitle = txtvTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemdescriptionListitemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemdescriptionListitemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.itemdescription_listitem, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemdescriptionListitemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      Button butPreview = rootView.findViewById(R.id.butPreview);
      if (butPreview == null) {
        missingId = "butPreview";
        break missingId;
      }
      TextView txtvDescription = rootView.findViewById(R.id.txtvDescription);
      if (txtvDescription == null) {
        missingId = "txtvDescription";
        break missingId;
      }
      TextView txtvPubDate = rootView.findViewById(R.id.txtvPubDate);
      if (txtvPubDate == null) {
        missingId = "txtvPubDate";
        break missingId;
      }
      TextView txtvTitle = rootView.findViewById(R.id.txtvTitle);
      if (txtvTitle == null) {
        missingId = "txtvTitle";
        break missingId;
      }
      return new ItemdescriptionListitemBinding((RelativeLayout) rootView, butPreview,
          txtvDescription, txtvPubDate, txtvTitle);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
